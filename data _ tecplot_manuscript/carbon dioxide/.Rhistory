if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
?mtcars
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
?import
?mtcars
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
mtcars
cars
dist
?dist
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
library(datasets)  # Load base packages manually
head(mtcars)
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
pc <- prcomp(~ mpg + cyl + disp + hp + wt + qsec + am +
gear + carb,
data = mtcars,
center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Get standard deviations and rotation
pc
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[, -12])
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, rio)
# CSV
rio_csv <- import("C:\Users\77891\Desktop\R\mbb.csv")
# CSV
rio_csv <- import("C:\Users\77891\Desktop\R\mbb.csv")
# CSV
rio_csv <- import("Desktop\R\mbb.csv")
# CSV
rio_csv <- import("C:'\Users'\77891'\Desktop'\R'\mbb.csv")
# CSV
rio_csv <- import("C:\\Users\\77891\\Desktop\\R\\mbb.csv")
View(rio_csv)
View(rio_csv)
# Clear console
cat("\014")  # ctrl+L
# Clear console
cat("\014")  # ctrl+L
# Define variable groups
x <- as.matrix(data[, -12])
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
# Define variable groups
x <- as.matrix(data[, -12])
install.packages("SAVE")
library(SAVE)
install.packages("BACCO")
library(BACCO)
data(toys)
library(datasets)
?mtcars
head(mtcars)
library(datasets)
data(toys)
?toys
head(toys)
?toys
D1.toy
View(D2.toy)
View(D1.toy)
View(D2.toy)
args(ht.fun)
R > data("synthmodel", packagee = "SAVE")
data("synthmodel", packagee = "SAVE")
library(SAVE)
data("synthmodel", packagee = "SAVE")
>data("synthmodel", packagee = "SAVE")
data("synthmodel", packagee = "SAVE")
toy <- latin.hypercube(20,6)
data(toys)
View(synthmodel)
View(synthmodel)
library(datasets)
data(toys)
data(toys)
library(datasets)
data(toys)
?toys
y
??toys
data(toy)
data(toy)
data(toys)
library(BACCO)
data(toys)
data(spotweldfield,package='SAVE')
data(spotweldmodel,package='SAVE')
？stage1（）
？stage1
?stage1()
library(SAVE)
?stage1()
?stage1()
library(SAVE)
?stage1
?stage1()
## Not run:
library(SAVE)
data(spotweldfield,package='SAVE')
data(spotweldmodel,package='SAVE')
gfsw <- SAVE(response.name="diameter", controllable.names=c("current", "load", "thickness"),
calibration.names="tuning", field.data=spotweldfield,
model.data=spotweldmodel, mean.formula=~1,
bestguess=list(tuning=4.0))
# summary of the results
summary(gfsw)
## Not run:
library(SAVE)
data(spotweldfield,package='SAVE')
View(spotweldfield)
data(spotweldmodel,package='SAVE')
View(spotweldmodel)
View(spotweldmodel)
gfsw <- bayesfit(object=gfsw, prior=c(uniform("tuning", upper=8, lower=0.8)),
n.iter=20000, n.burnin=100, n.thin=2)
# summary of the results
summary(gfsw)
## Not run:
library(SAVE)
data(spotweldfield,package='SAVE')
data(spotweldmodel,package='SAVE')
gfsw <- SAVE(response.name="diameter", controllable.names=c("current", "load", "thickness"),
calibration.names="tuning", field.data=spotweldfield,
model.data=spotweldmodel, mean.formula=~1,
bestguess=list(tuning=4.0))
gfsw <- bayesfit(object=gfsw, prior=c(uniform("tuning", upper=8, lower=0.8)),
n.iter=20000, n.burnin=100, n.thin=2)
## Not run:
library(SAVE)
data(spotweldfield,package='SAVE')
data(spotweldmodel,package='SAVE')
gfsw <- SAVE(response.name="diameter", controllable.names=c("current", "load", "thickness"),
calibration.names="tuning", field.data=spotweldfield,
model.data=spotweldmodel, mean.formula=~1,
bestguess=list(tuning=4.0))
gfsw <- bayesfit(object=gfsw, prior=c(uniform("tuning", upper=8, lower=0.8)),
n.iter=20000, n.burnin=100, n.thin=2)
## End(Not run)
plot(gfsw,option = "trace")
## End(Not run)
plot(gfsw,option = "trace")
plot(gfsw,option = "trace")
# summary of the results
summary(gfsw)
## End(Not run)
plot(gfsw,option = "calibration")
plot(gfsw,option = "calibration")
slotsNames(swbayes)
slotsNames(gfsw)
slotsNames(gfsw)
## Not run:
library(SAVE)
data(spotweldfield,package='SAVE')
data(spotweldmodel,package='SAVE')
gfsw <- SAVE(response.name="diameter", controllable.names=c("current", "load", "thickness"),
calibration.names="tuning", field.data=spotweldfield,
model.data=spotweldmodel, mean.formula=~1,
bestguess=list(tuning=4.0))
gfsw <- bayesfit(object=gfsw, prior=c(uniform("tuning", upper=8, lower=0.8)),
n.iter=20000, n.burnin=100, n.thin=2)
# summary of the results
summary(gfsw)
plot(gfsw,option ="precision")
plot(gfsw,option = "calibration")
plot(gfsw,option ="trace")
## Not run:
library(SAVE)
data("synthmodel",package='SAVE')
data("synthfield",package='SAVE')
synth <- SAVE(response.name="y", controllable.names="x",
calibration.names="v", field.data=synthfield,
model.data=synthmodel, mean.formula=~1+x,
bestguess=list(v = 1.5))
set.seed(0)
synth <- bayesfit(object=synth, prior=uniform(var.name = "v", lower=0, upper = 3)),
n.iter=20000)
synth <- bayesfit(object = synth,
prior = uniform(var.name = "v", lower=0, upper = 3),
n.iter=20000)
xnew <- data.frame(x = seq(from = 0.05, to = 3.05, length = 25))
valsynth <- validate(object = synth, newdesign = xnew, n.burnin = 100)
## End(Not run)
plot(gfsw,option = "calibration")
## End(Not run)
plot(synth,option = "calibration")
?options()
?plot()
## End(Not run)
plot(synth,option = "calibration")
plot(synth,option ="precision")
plot(synth,option ="trace")
## End(Not run)
plot(synth,option = "calibration")
plot(synth,option ="precision")
plot(xnew,valsynth)
View(valsynth)
plot(xnew,validate)
View(valsynth)
plot(validate())
?validate
plot(valsynth)
?validate
summary.valsynth
summary(valsynth)
plot(valsynth)
## Not run:
library(SAVE)
data("synthmodel",package='SAVE')
View(synthmodel)
data("synthfield",package='SAVE')
View(synthfield)
?SAVE
synth <- SAVE(response.name="y", controllable.names="x",
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 1.5))
synth <- SAVE(response.name="y", controllable.names="x",
calibration.names="v", field.data=synthfield,
model.data=synthmodel, mean.formula=~1+x,
bestguess=list(v = 1.5))
set.seed(0)
synth <- bayesfit(object = synth,
prior = uniform(var.name = "v", lower=0, upper = 3),
n.iter=20000)
xnew <- data.frame(x = seq(from = 0.05, to = 3.05, length = 25))
View(xnew)
View(xnew)
valsynth <- validate(object = synth, newdesign = xnew, n.burnin = 100)
# summary of the results
summary(valsynth)
?validate
plot(valsynth)
?plot
plot(bias.corrected)
plot(valsynth.bias.corrected)
plot(valsynth$bias.corrected)
View(valsynth)
plot(valsynth$validate$bias.corrected)
plot(valsynth@validate$bias.corrected)
plot(valsynth@validate@bias.corrected)
getSlots("xnew")
View(synthmodel)
getSlots("validate")
getSlots("newdesign")
getSlots("bias.corrected")
View(valsynth)
# summary of the results
summary(valsynth)
plot(x,bias.corrected)
plot(bias.corrected)
plot(validate$bias.corrected)
plot(validate@bias.corrected)
plot(bias.corrected@validate)
plot(validate)
plot(valsynth)
?valsynth
??valsynth
plot(valsynth$validate)
plot(valsynth@validate)
plot(valsynth@bias.corrected)
plot(valsynth@validate@bias.corrected)
plot(valsynth)
plot(valsynth@validate)
plot(valsynth@validate$bias.corrected)
summary(valsynth@validate)
valsynth@validate
summary(valsynth@validate[1])
(valsynth@validate[1])
valsynth@validate[1]
valsynth@validate[:,1]
valsynth@validate(:,1)
valsynth@validate(1,1)
valsynth@validate[1,1]
valsynth@validate[2,1]
valsynth@validate[,1]
plot(valsynth@validate[,1])
plot(valsynth@validate[,"bias.corrected"])
## Not run:
library(SAVE)
data("synthmodel",package='SAVE')
data("synthfield",package='SAVE')
View(synthfield)
library(readxl)
synthfield <- read_excel("C:/Users/77891/Desktop/统计thesis/synthfield.xlsx")
View(synthfield)
## Not run:
library(SAVE)
data("synthmodel",package='SAVE')
data("synthfield",package='SAVE')
plot(synthfield)
plot(synthfield$x,synthfield$y)
plot(synthmodel$x,synthmodel$y)
load("synthmodel.Rdata")
load("synthfield.Rdata")
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthfield.RData")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
## Not run:
library(SAVE)
plot(synthfield$x,synthfield$y)
plot(synthfield)
plot(synthfield$Tr,synthfield$alpha)
plot(synthfield)
View(synthfield)
library(readxl)
synthfield <- read_excel("C:/Users/77891/Desktop/统计thesis/改Tr指数/synthfield1.xlsx")
View(synthfield)
##save data
save(synthfield, file = "synthfield.RData")
View(synthfield)
plot(synthfield$Tr,synthfield$alpha)
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
View(synthmodel)
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5))
## Not run:
library(SAVE)
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthfield.RData")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5))
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5),
kriging.controls = list("nugget" = 1e-10))
##############
# obtain the posterior distribution of the unknown parameters
##############
#?bayesfit
set.seed(0)
synth <- bayesfit(object = synth,
prior = uniform(var.name = "v", lower=0.1, upper = 0.9),
n.iter=20000)
plot(synthmodel)
plot(synthmodel$Tr,synthmodel$alpha)
library(readxl)
synthfield <- read_excel("C:/Users/77891/Desktop/统计thesis/改Tr指数/synthfield2.xlsx")
View(synthfield)
##save data
save(synthfield, file = "synthfield.RData")
## Not run:
library(SAVE)
load("synthmodel.Rdata")
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5),
kriging.controls = list("nugget" = 1e-10))
##save data
save(synthfield, file = "synthfield.RData")
## Not run:
library(SAVE)
load("synthmodel.Rdata")
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthfield.RData")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
plot(synthfield)
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5),
kriging.controls = list("nugget" = 1e-10))
##############
# obtain the posterior distribution of the unknown parameters
##############
#?bayesfit
set.seed(0)
synth <- bayesfit(object = synth,
prior = uniform(var.name = "v", lower=0.1, upper = 0.9),
n.iter=20000)
setwd("C:/Users/77891/Desktop/Equation of state research,WEI/data & tecplot/carbon dioxide")
#save(exp_data, file = "exp_data2.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-10)
cpara_max <- c(40,10)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8),c(-0.2,-0.3,-0.4,-0.5,-0.6)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data2.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr", ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
predictions
