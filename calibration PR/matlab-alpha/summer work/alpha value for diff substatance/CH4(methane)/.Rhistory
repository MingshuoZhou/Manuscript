## Not run:
library(SAVE)
load("alphamodel1.Rdata")
## Not run:
library(SAVE)
load("alphamodel1.Rdata")
load("alphafield.Rdata")
load("alphareal.Rdata")
## Not run:
library(SAVE)
load("alphamodel1.Rdata")
library(readxl)
alphamodel3 <- read_excel("C:/Users/77891/Desktop/数据/alphamodel3.xlsx")
View(alphamodel3)
View(alphamodel3)
#save(alphafield, file = "alphafield.RData")
save(alphamodel3, file = "alphamodel3.RData")
install.packages("C:/Users/77891/Desktop/sung package/HetCalibrate_0.1.tar.gz", repos = NULL, type = "source")
install.packages("hetGP")
install.packages("rootSolve")
install.packages("randtoolbox")
install.packages("C:/Users/77891/Desktop/sung package/HetCalibrate_0.1.tar.gz", repos = NULL, type = "source")
setwd("C:/Users/77891/Desktop/alpha value for diff substatance/CH4(methane)")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-10)
cpara_max <- c(40,10)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(0,1,2,3,4,5),c(4,3,2,1,0,-1,-2,-3,-4,-5)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z)
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "day", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
