for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-40)
cpara_max <- c(40,40)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(-6,-7,-8,-9,-10,-11),c(11,12,13,14,15,16,17)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-40)
cpara_max <- c(40,40)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(-4,-5,-6,-7,-8,-9,-10,-11),c(9,10,11,12,13,14,15,16,17)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-40)
cpara_max <- c(40,40)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(-3.5,-4,-4.5,-5,-5.5,-6),c(7,7.5,8,8.5,9,9.5,10)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
View(model)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-40)
cpara_max <- c(40,40)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(-2,-2.5,-3,-3.5,-4,-4.5,-5,-5.5,-6),c(6.5,7,7.5,8,8.5,9,9.5,10)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
View(model)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-40)
cpara_max <- c(40,40)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(-3,-3.1,-3.2,-3.3,-3.4,-3.5,-3.6),c(6.1,6.2,6.3,6.4,6.5,6.6,6.7,6.8,6.9,7)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
View(model)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-40)
cpara_max <- c(40,40)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(-2.5,-2.6,-2.7,-2.8,-2.9,-3,-3.1,-3.2,-3.3,-3.4,-3.5,-3.6),c(6.1,6.2,6.3,6.4,6.5,6.6,6.7,6.8,6.9,7)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
View(model)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-40)
cpara_max <- c(40,40)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(-2.5,-2.6,-2.7,-2.8,-2.9,-3,-3.1,-3.2,-3.3,-3.4,-3.5,-3.6),c(6.25,6.26,6.27,6.28,6.29,6.3,6.31,6.32,6.33,6.34,6.35)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
View(model)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-40)
cpara_max <- c(40,40)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(-2.95,-2.96,-2.97,-2.98,-2.99,-3,-3.01,-3.02,-3.03,-3.04,-3.05),c(6.25,6.26,6.27,6.28,6.29,6.3,6.31,6.32,6.33,6.34,6.35)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
View(exp_data)
View(model)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-40)
cpara_max <- c(40,40)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(-2.95,-2.96,-2.97,-2.98,-2.99,-3,-3.01,-3.02,-3.03,-3.04,-3.05),c(6.25,6.26,6.27,6.28,6.29,6.3,6.31,6.32,6.33,6.34,6.35,6.36,6.37,6.38)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z,xlab = "Tr",ylab = "alpha")
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "discrepancy", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
