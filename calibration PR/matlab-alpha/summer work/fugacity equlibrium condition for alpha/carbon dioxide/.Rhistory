## Not run:
library(SAVE)
load("alphamodel1.Rdata")
## Not run:
library(SAVE)
load("alphamodel1.Rdata")
load("alphafield.Rdata")
load("alphareal.Rdata")
## Not run:
library(SAVE)
load("alphamodel1.Rdata")
library(readxl)
alphamodel3 <- read_excel("C:/Users/77891/Desktop/数据/alphamodel3.xlsx")
View(alphamodel3)
View(alphamodel3)
#save(alphafield, file = "alphafield.RData")
save(alphamodel3, file = "alphamodel3.RData")
install.packages("C:/Users/77891/Desktop/sung package/HetCalibrate_0.1.tar.gz", repos = NULL, type = "source")
install.packages("hetGP")
install.packages("rootSolve")
install.packages("randtoolbox")
install.packages("C:/Users/77891/Desktop/sung package/HetCalibrate_0.1.tar.gz", repos = NULL, type = "source")
setwd("C:/Users/77891/Desktop/new alpha/carbon dioxide")
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-10)
cpara_max <- c(40,10)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(0,1,2,3,4,5,6,7),c(1,0,-1,-2,-3,-4,-5)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z)
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "alpha", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-10)
cpara_max <- c(40,10)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(0.5,1,1.5,2,2.5,3,3.5,4),c(-3,-2.5,-2,-1.5,-1,-0.5,0)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z)
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "alpha", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
#save(exp_data, file = "exp_data.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
out <- cpara[1] + x*cpara[2]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- c(-40,-10)
cpara_max <- c(40,10)
# setting for the inital guess
cpara_init.mx <- as.matrix(expand.grid(c(1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,2.4,2.5),c(-3,-2.5,-2,-1.5,-1,-0.5,0)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data.RData")
X <- exp_data[,1]
Z <- exp_data[,2]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- seq(min(X), max(X), length.out = 1000)
xgrid <- matrix(xgrid, ncol = 1)
predictions <- predict(x = xgrid, object =  model)
## Display mean predictive surface
plot(X, Z)
lines(xgrid, predictions$mean, col = 'red', lwd = 2)
lines(xgrid, f.sim(xgrid, cpara.est), col = 4, lty = 2, lwd = 2)
## Display 95% prediction intervals
lines(xgrid, qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
lines(xgrid, qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs)),
col = 3, lty = 3, lwd = 2)
## Display discrepancy
plot(xgrid, predictions$mean - f.sim(xgrid, cpara.est), xlab = "Tr", ylab = "alpha", type = "l", col = 2, lwd = 2)
abline(h=0, lty = 2)
View(model)
# read functions
cov_ortho_gen <- function(X1, X2 = NULL, theta, f.sim, df.sim = NULL, cpara,
inputBounds = NULL, MC.num = 500, nugget = 1e-8){
if(is.null(inputBounds)) inputBounds <- apply(X1, 2, range)
cov.ori <- covar.sep(X1, X2, d=-1/(4*log(theta)), g=0)
if(ncol(X1) == 1){
xi <- matrix(seq(0, 1, length.out = MC.num), ncol = ncol(X1))
}else{
xi <- sobol(MC.num, ncol(X1))
}
xi <- xi * matrix(rep(inputBounds[2,] - inputBounds[1,], each = nrow(xi)), ncol = ncol(xi)) +
matrix(rep(inputBounds[1,], each = nrow(xi)), ncol = ncol(xi))
Wm <- covar.sep(xi, d=-1/(4*log(theta)), g=0)
wx1 <- apply(X1, 1, function(x) covar.sep(matrix(x, ncol = ncol(X1)), xi, d=-1/(4*log(theta)), g=0))
if(is.null(X2)) {
wx2 <- wx1
}else{
wx2 <- apply(X2, 1, function(x) covar.sep(matrix(x, ncol = ncol(X2)), xi, d=-1/(4*log(theta)), g=0))
}
Fm <- df.sim(xi, cpara)
if(length(cpara) == 1) Fm <- matrix(Fm, ncol = 1)
rm.index <- apply(Fm, 2, function(x) all(x==0))
if(all(rm.index)){
cov.ortho <- cov.ori
}else{
if(length(cpara) == 1){
FWF_inverse <- 1/(t(Fm) %*% Wm %*% Fm)
}else{
if(any(rm.index)) {
Fm <- Fm[,!rm.index]
}
FWF <- t(Fm) %*% Wm %*% Fm
FWF_inverse <- solve(FWF + diag(nugget * diag(FWF)))
}
cov.ortho <- cov.ori - t(wx1) %*% Fm %*% FWF_inverse %*% t(Fm) %*% wx2
}
return(cov.ortho)
}
