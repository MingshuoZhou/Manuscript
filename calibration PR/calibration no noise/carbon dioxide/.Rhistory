slotsNames(swbayes)
slotsNames(gfsw)
slotsNames(gfsw)
## Not run:
library(SAVE)
data(spotweldfield,package='SAVE')
data(spotweldmodel,package='SAVE')
gfsw <- SAVE(response.name="diameter", controllable.names=c("current", "load", "thickness"),
calibration.names="tuning", field.data=spotweldfield,
model.data=spotweldmodel, mean.formula=~1,
bestguess=list(tuning=4.0))
gfsw <- bayesfit(object=gfsw, prior=c(uniform("tuning", upper=8, lower=0.8)),
n.iter=20000, n.burnin=100, n.thin=2)
# summary of the results
summary(gfsw)
plot(gfsw,option ="precision")
plot(gfsw,option = "calibration")
plot(gfsw,option ="trace")
## Not run:
library(SAVE)
data("synthmodel",package='SAVE')
data("synthfield",package='SAVE')
synth <- SAVE(response.name="y", controllable.names="x",
calibration.names="v", field.data=synthfield,
model.data=synthmodel, mean.formula=~1+x,
bestguess=list(v = 1.5))
set.seed(0)
synth <- bayesfit(object=synth, prior=uniform(var.name = "v", lower=0, upper = 3)),
n.iter=20000)
synth <- bayesfit(object = synth,
prior = uniform(var.name = "v", lower=0, upper = 3),
n.iter=20000)
xnew <- data.frame(x = seq(from = 0.05, to = 3.05, length = 25))
valsynth <- validate(object = synth, newdesign = xnew, n.burnin = 100)
## End(Not run)
plot(gfsw,option = "calibration")
## End(Not run)
plot(synth,option = "calibration")
?options()
?plot()
## End(Not run)
plot(synth,option = "calibration")
plot(synth,option ="precision")
plot(synth,option ="trace")
## End(Not run)
plot(synth,option = "calibration")
plot(synth,option ="precision")
plot(xnew,valsynth)
View(valsynth)
plot(xnew,validate)
View(valsynth)
plot(validate())
?validate
plot(valsynth)
?validate
summary.valsynth
summary(valsynth)
plot(valsynth)
## Not run:
library(SAVE)
data("synthmodel",package='SAVE')
View(synthmodel)
data("synthfield",package='SAVE')
View(synthfield)
?SAVE
synth <- SAVE(response.name="y", controllable.names="x",
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 1.5))
synth <- SAVE(response.name="y", controllable.names="x",
calibration.names="v", field.data=synthfield,
model.data=synthmodel, mean.formula=~1+x,
bestguess=list(v = 1.5))
set.seed(0)
synth <- bayesfit(object = synth,
prior = uniform(var.name = "v", lower=0, upper = 3),
n.iter=20000)
xnew <- data.frame(x = seq(from = 0.05, to = 3.05, length = 25))
View(xnew)
View(xnew)
valsynth <- validate(object = synth, newdesign = xnew, n.burnin = 100)
# summary of the results
summary(valsynth)
?validate
plot(valsynth)
?plot
plot(bias.corrected)
plot(valsynth.bias.corrected)
plot(valsynth$bias.corrected)
View(valsynth)
plot(valsynth$validate$bias.corrected)
plot(valsynth@validate$bias.corrected)
plot(valsynth@validate@bias.corrected)
getSlots("xnew")
View(synthmodel)
getSlots("validate")
getSlots("newdesign")
getSlots("bias.corrected")
View(valsynth)
# summary of the results
summary(valsynth)
plot(x,bias.corrected)
plot(bias.corrected)
plot(validate$bias.corrected)
plot(validate@bias.corrected)
plot(bias.corrected@validate)
plot(validate)
plot(valsynth)
?valsynth
??valsynth
plot(valsynth$validate)
plot(valsynth@validate)
plot(valsynth@bias.corrected)
plot(valsynth@validate@bias.corrected)
plot(valsynth)
plot(valsynth@validate)
plot(valsynth@validate$bias.corrected)
summary(valsynth@validate)
valsynth@validate
summary(valsynth@validate[1])
(valsynth@validate[1])
valsynth@validate[1]
valsynth@validate[:,1]
valsynth@validate(:,1)
valsynth@validate(1,1)
valsynth@validate[1,1]
valsynth@validate[2,1]
valsynth@validate[,1]
plot(valsynth@validate[,1])
plot(valsynth@validate[,"bias.corrected"])
## Not run:
library(SAVE)
data("synthmodel",package='SAVE')
data("synthfield",package='SAVE')
View(synthfield)
library(readxl)
synthfield <- read_excel("C:/Users/77891/Desktop/统计thesis/synthfield.xlsx")
View(synthfield)
## Not run:
library(SAVE)
data("synthmodel",package='SAVE')
data("synthfield",package='SAVE')
plot(synthfield)
plot(synthfield$x,synthfield$y)
plot(synthmodel$x,synthmodel$y)
load("synthmodel.Rdata")
load("synthfield.Rdata")
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthfield.RData")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
## Not run:
library(SAVE)
plot(synthfield$x,synthfield$y)
plot(synthfield)
plot(synthfield$Tr,synthfield$alpha)
plot(synthfield)
View(synthfield)
library(readxl)
synthfield <- read_excel("C:/Users/77891/Desktop/统计thesis/改Tr指数/synthfield1.xlsx")
View(synthfield)
##save data
save(synthfield, file = "synthfield.RData")
View(synthfield)
plot(synthfield$Tr,synthfield$alpha)
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
View(synthmodel)
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5))
## Not run:
library(SAVE)
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthfield.RData")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5))
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5),
kriging.controls = list("nugget" = 1e-10))
##############
# obtain the posterior distribution of the unknown parameters
##############
#?bayesfit
set.seed(0)
synth <- bayesfit(object = synth,
prior = uniform(var.name = "v", lower=0.1, upper = 0.9),
n.iter=20000)
plot(synthmodel)
plot(synthmodel$Tr,synthmodel$alpha)
library(readxl)
synthfield <- read_excel("C:/Users/77891/Desktop/统计thesis/改Tr指数/synthfield2.xlsx")
View(synthfield)
##save data
save(synthfield, file = "synthfield.RData")
## Not run:
library(SAVE)
load("synthmodel.Rdata")
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5),
kriging.controls = list("nugget" = 1e-10))
##save data
save(synthfield, file = "synthfield.RData")
## Not run:
library(SAVE)
load("synthmodel.Rdata")
load("synthmodel.Rdata")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthfield.RData")
load("C:/Users/77891/Desktop/统计thesis/OxygenKOmodel/synthmodel.RData")
plot(synthfield)
##############
# create the SAVE object which describes the problem and
# compute the corresponding mle estimates
##############
#?SAVE()
synth <- SAVE(response.name="alpha", controllable.names = 'Tr',
calibration.names="v", field.data=synthfield,
model.data=synthmodel,
bestguess=list(v = 0.5),
kriging.controls = list("nugget" = 1e-10))
##############
# obtain the posterior distribution of the unknown parameters
##############
#?bayesfit
set.seed(0)
synth <- bayesfit(object = synth,
prior = uniform(var.name = "v", lower=0.1, upper = 0.9),
n.iter=20000)
#save(exp_data1, file = "exp_data2.RData")
library(HetCalibrate)
f.sim <- function(x, cpara) {
if(is.null(dim(x))){
x1 <- x[1]
x2 <- x[2]
}else{
x1 <- x[,1]
x2 <- x[,2]
}
out <- cpara[1] + x1*cpara[2] + x2*cpara[3]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x[,1],x[,2]))
}else{
return(cbind(1,x))
}
}
# setting for lower and upper bounds of parameters
cpara_min <- rep(-5, 3)
cpara_max <- rep(5, 3)
cpara_init.mx <- as.matrix(expand.grid(c(-2.5,0,2.5),c(-2.5,0,2.5),c(-2.5,0,2.5)))
colnames(cpara_init.mx) <- NULL
# load experimental data
load("exp_data2.RData")
X <- as.matrix(exp_data1[,1:2])
Z <- exp_data1[,3]
model <- vector("list",nrow(cpara_init.mx))
# model fit
for (jj in 1:nrow(cpara_init.mx)){
cpara_init.vt <- cpara_init.mx[jj,]
model[[jj]] <- mleHomCalibrate(X = X, Z = Z, cpara_max = cpara_max, cpara_min = cpara_min,
init = list("cpara" = cpara_init.vt),
covtype = "Gaussian", orthogonal = TRUE, f.sim = f.sim, df.sim = df.sim)
}
llmax.index<-which.max(sapply(model,function(x) x$ll))
model <-model[[llmax.index]]
print(model$cpara)
# calibration estimate
cpara.est <- model$cpara
cat("parameter estimate:", cpara.est, "\n")
# predictions at test data
xgrid <- cbind(seq(min(X[,1]), max(X[,1]), length.out = 100), P = rep(1, 100))
predictions <- predict(x = xgrid, object =  model)
## output mean predictive surface
out <- predictions$mean
write.csv(out, file = "predictmean.csv", row.names = FALSE)
## output upper bound
#out <- qnorm(0.975, predictions$mean, sqrt(predictions$sd2 + predictions$nugs))
#write.csv(out, file = "upperbound.csv", row.names = FALSE)
## output upper bound
#out <- qnorm(0.025, predictions$mean, sqrt(predictions$sd2 + predictions$nugs))
#write.csv(out, file = "lowerbound.csv", row.names = FALSE)
## output model
#out <- f.sim(xgrid, cpara.est)
#write.csv(out, file = "modeloutput.csv", row.names = FALSE)
setwd("C:/Users/77891/Desktop/calibration no noise/carbon dioxide")
library(plgp)
library(randtoolbox)
# read functions
cov_ortho_gen <- function(X1, X2 = NULL, theta, f.sim, df.sim = NULL, cpara,
inputBounds = NULL, MC.num = 500, nugget = 1e-8){
if(is.null(inputBounds)) inputBounds <- apply(X1, 2, range)
cov.ori <- covar.sep(X1, X2, d=-1/(4*log(theta)), g=0)
if(ncol(X1) == 1){
xi <- matrix(seq(0, 1, length.out = MC.num), ncol = ncol(X1))
}else{
xi <- sobol(MC.num, ncol(X1))
}
xi <- xi * matrix(rep(inputBounds[2,] - inputBounds[1,], each = nrow(xi)), ncol = ncol(xi)) +
matrix(rep(inputBounds[1,], each = nrow(xi)), ncol = ncol(xi))
Wm <- covar.sep(xi, d=-1/(4*log(theta)), g=0)
wx1 <- apply(X1, 1, function(x) covar.sep(matrix(x, ncol = ncol(X1)), xi, d=-1/(4*log(theta)), g=0))
if(is.null(X2)) {
wx2 <- wx1
}else{
wx2 <- apply(X2, 1, function(x) covar.sep(matrix(x, ncol = ncol(X2)), xi, d=-1/(4*log(theta)), g=0))
}
Fm <- df.sim(xi, cpara)
if(length(cpara) == 1) Fm <- matrix(Fm, ncol = 1)
rm.index <- apply(Fm, 2, function(x) all(x==0))
if(all(rm.index)){
cov.ortho <- cov.ori
}else{
if(length(cpara) == 1){
FWF_inverse <- 1/(t(Fm) %*% Wm %*% Fm)
}else{
if(any(rm.index)) {
Fm <- Fm[,!rm.index]
}
FWF <- t(Fm) %*% Wm %*% Fm
FWF_inverse <- solve(FWF + diag(nugget * diag(FWF)))
}
cov.ortho <- cov.ori - t(wx1) %*% Fm %*% FWF_inverse %*% t(Fm) %*% wx2
}
return(cov.ortho)
}
nl <- function(para, X, Y)
{
d <- ncol(X)
theta <- para[1:d]
cpara <- para[(length(para)-d):length(para)]
n <- length(Y)
K <- cov_ortho_gen(X, NULL, theta, f.sim, df.sim, cpara)
Ki <- solve(K+diag(1e-4,nrow(K)))
ldetK <- determinant(K+diag(1e-4,nrow(K)), logarithm=TRUE)$modulus
ll <- - (n/2)*log(t(Y-f.sim(X,cpara)) %*% Ki %*% (Y-f.sim(X,cpara))) - (1/2)*ldetK
return(-ll)
}
predict.func <- function(out, newdata){
d <- ncol(X)
para <- out$par
theta <- para[1:d]
cpara <- para[(length(para)-d):length(para)]
KX <- cov_ortho_gen(newdata, X, theta, f.sim, df.sim, cpara)
KXX <- cov_ortho_gen(newdata, NULL, theta, f.sim, df.sim, cpara)
K <- cov_ortho_gen(X, NULL, theta, f.sim, df.sim, cpara)
Ki <- solve(K+diag(1e-4,nrow(K)))
mup <- f.sim(newdata,cpara) + KX %*% Ki %*% (Z - f.sim(X,cpara))
tau2hat <- drop(t(Z-f.sim(X,cpara)) %*% Ki %*% (Z-f.sim(X,cpara)) / nrow(X))
Sigmap <- diag(tau2hat*(KXX + diag(1e-4, nrow(newdata)) - KX %*% Ki %*% t(KX)))
return(list(mean=mup, sd=sqrt(pmax(Sigmap,0)), model=f.sim(newdata,cpara)))
}
f.sim <- function(x, cpara) {
if(is.null(dim(x))){
x1 <- x[1]
x2 <- x[2]
}else{
x1 <- x[,1]
x2 <- x[,2]
}
out <- cpara[1] + x1*cpara[2] + x2*cpara[3]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x[,1],x[,2]))
}else{
return(cbind(1,x))
}
}
# read data
data.df <- read.csv("raw alpha for exp_data.csv")
X <- as.matrix(data.df[,1:2])
Z <- data.df[,3]
# estimate parameters
out <- optim(c(0.5, 0.5, 0, 0, 0), nl, method="L-BFGS-B", lower=c(1e-6,1e-6,-5,-5,-5), upper=c(1-1e-6, 1-1e-6,5,5,5), X=X, Y=Z)
# prediction
newdata.df <- read.csv("alpha.csv")
newdata <- as.matrix(newdata.df[,1:2])
predictions <- predict.func(out, newdata)
# output predictions
output.df <- data.frame(newdata, mean=predictions$mean, true = newdata.df[,3], model=predictions$model, upper=predictions$mean+qnorm(0.975)*predictions$sd,
lower=predictions$mean+qnorm(0.025)*predictions$sd)
write.csv(output.df, file = "predictions.csv", row.names = FALSE)
library(plgp)
library(randtoolbox)
# read functions
cov_ortho_gen <- function(X1, X2 = NULL, theta, f.sim, df.sim = NULL, cpara,
inputBounds = NULL, MC.num = 500, nugget = 1e-8){
if(is.null(inputBounds)) inputBounds <- apply(X1, 2, range)
cov.ori <- covar.sep(X1, X2, d=-1/(4*log(theta)), g=0)
if(ncol(X1) == 1){
xi <- matrix(seq(0, 1, length.out = MC.num), ncol = ncol(X1))
}else{
xi <- sobol(MC.num, ncol(X1))
}
xi <- xi * matrix(rep(inputBounds[2,] - inputBounds[1,], each = nrow(xi)), ncol = ncol(xi)) +
matrix(rep(inputBounds[1,], each = nrow(xi)), ncol = ncol(xi))
Wm <- covar.sep(xi, d=-1/(4*log(theta)), g=0)
wx1 <- apply(X1, 1, function(x) covar.sep(matrix(x, ncol = ncol(X1)), xi, d=-1/(4*log(theta)), g=0))
if(is.null(X2)) {
wx2 <- wx1
}else{
wx2 <- apply(X2, 1, function(x) covar.sep(matrix(x, ncol = ncol(X2)), xi, d=-1/(4*log(theta)), g=0))
}
Fm <- df.sim(xi, cpara)
if(length(cpara) == 1) Fm <- matrix(Fm, ncol = 1)
rm.index <- apply(Fm, 2, function(x) all(x==0))
if(all(rm.index)){
cov.ortho <- cov.ori
}else{
if(length(cpara) == 1){
FWF_inverse <- 1/(t(Fm) %*% Wm %*% Fm)
}else{
if(any(rm.index)) {
Fm <- Fm[,!rm.index]
}
FWF <- t(Fm) %*% Wm %*% Fm
FWF_inverse <- solve(FWF + diag(nugget * diag(FWF)))
}
cov.ortho <- cov.ori - t(wx1) %*% Fm %*% FWF_inverse %*% t(Fm) %*% wx2
}
return(cov.ortho)
}
nl <- function(para, X, Y)
{
d <- ncol(X)
theta <- para[1:d]
cpara <- para[(length(para)-d):length(para)]
n <- length(Y)
K <- cov_ortho_gen(X, NULL, theta, f.sim, df.sim, cpara)
Ki <- solve(K+diag(1e-4,nrow(K)))
ldetK <- determinant(K+diag(1e-4,nrow(K)), logarithm=TRUE)$modulus
ll <- - (n/2)*log(t(Y-f.sim(X,cpara)) %*% Ki %*% (Y-f.sim(X,cpara))) - (1/2)*ldetK
return(-ll)
}
predict.func <- function(out, newdata){
d <- ncol(X)
para <- out$par
theta <- para[1:d]
cpara <- para[(length(para)-d):length(para)]
KX <- cov_ortho_gen(newdata, X, theta, f.sim, df.sim, cpara)
KXX <- cov_ortho_gen(newdata, NULL, theta, f.sim, df.sim, cpara)
K <- cov_ortho_gen(X, NULL, theta, f.sim, df.sim, cpara)
Ki <- solve(K+diag(1e-4,nrow(K)))
mup <- f.sim(newdata,cpara) + KX %*% Ki %*% (Z - f.sim(X,cpara))
tau2hat <- drop(t(Z-f.sim(X,cpara)) %*% Ki %*% (Z-f.sim(X,cpara)) / nrow(X))
Sigmap <- diag(tau2hat*(KXX + diag(1e-4, nrow(newdata)) - KX %*% Ki %*% t(KX)))
return(list(mean=mup, sd=sqrt(pmax(Sigmap,0)), model=f.sim(newdata,cpara)))
}
f.sim <- function(x, cpara) {
if(is.null(dim(x))){
x1 <- x[1]
x2 <- x[2]
}else{
x1 <- x[,1]
x2 <- x[,2]
}
out <- cpara[1] + x1*cpara[2] + x2*cpara[3]
return(c(out))
}
df.sim <- function(x, cpara) {
if(is.null(dim(x))){
return(c(1,x[,1],x[,2]))
}else{
return(cbind(1,x))
}
}
# read data
data.df <- read.csv("raw alpha for exp_data.csv")
X <- as.matrix(data.df[,1:2])
Z <- data.df[,3]
# estimate parameters
out <- optim(c(0.5, 0.5, 0, 0, 0), nl, method="L-BFGS-B", lower=c(1e-6,1e-6,-5,-5,-5), upper=c(1-1e-6, 1-1e-6,5,5,5), X=X, Y=Z)
# prediction
newdata.df <- read.csv("alpha.csv")
newdata <- as.matrix(newdata.df[,1:2])
predictions <- predict.func(out, newdata)
# output predictions
output.df <- data.frame(newdata, mean=predictions$mean, true = newdata.df[,3], model=predictions$model, upper=predictions$mean+qnorm(0.975)*predictions$sd,
lower=predictions$mean+qnorm(0.025)*predictions$sd)
write.csv(output.df, file = "predictions.csv", row.names = FALSE)
